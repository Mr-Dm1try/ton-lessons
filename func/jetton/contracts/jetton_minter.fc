#include "imports/stdlib.fc";
#include "imports/op_codes.fc";
#include "./utils.fc";

(int, slice, cell, cell) load_data() inline {
    slice ds = get_data().begin_parse();

    return (
        ds.load_coins(),        ;; total supply
        ds.load_msg_addr(),     ;; admin address
        ds.load_ref(),          ;; content
        ds.load_ref()           ;; wallet code
    );
}

() save_data(int total_supply, slice admin_address, cell content, cell wallet_code) impure inline_ref {
    set_data(begin_cell()
        .store_coins(total_supply)
        .store_slice(admin_address)
        .store_ref(content)
        .store_ref(wallet_code)
    );
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) {    ;; ignore bounced
        return ();
    }

    slice sender = cs~load_msg_addr();
    cs~load_msg_addr();     ;; skip destination
    cs~load_coins();        ;; skip value
    cs~skip_bits(1);        ;; skip extracurrency collection
    cs~load_coins();        ;; skip ihr_fee
    int fwd_fee = muldiv(cs~load_coins(), 3, 2);    ;; use for estimation of forward payload costs

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    (int total_supply, slice admin_address, cell content, cell wallet_code) = load_data();

    if (op == op::mint()) {
        throw_unless(73, equal_slices(sender, admin_address));
        slice receiver_address = in_msg_body~load_msg_addr();
        int amount = in_msg_body~load_coins();      ;; TONs for wallet
        cell master_msg = in_msg_body~load_ref();

        slice master_cs = master_msg.begin_parse();
        master_cs.skip_bits(32 + 64);   ;; op + query_id
        int jetton_amount = master_cs.load_coins();

        mint_tokens(receiver_address, wallet_code, amount, master_msg);
        save_data(total_supply + jetton_amount, admin_address, content, wallet_code);
        return ();
    }

    if (op == op::burn_notification()) {
        int amount = in_msg_body~load_coins();
        slice owner_address = in_msg_body~load_msg_addr();
        throw_unless(74, equal_slices(calculate_wallet_address(owner_address, my_address(), wallet_code), sender));

        save_data(total_supply - amount, admin_address, content, wallet_code);
        slice response_address = in_msg_body~load_msg_addr();

        if (response_address.preload_uint(2) != 0) {
            cell msg = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(response_address)
                .store_coins(0)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_uint(op::excesses(), 32)
                .store_uint(query_id, 64)
                .end_cell();

            send_raw_message(msg, 64 + 2);   ;; return remaining + ignore errors
        }

        return ();
    }

    if (op == 3) {  ;; change admin
        throw_unless(73, equal_slices(sender, admin_address));
        save_data(total_supply, in_msg_body~load_msg_addr(), content, wallet_code);
        return ();
    }

    if (op == 4) {  ;; change content
        throw_unless(73, equal_slices(sender, admin_address));
        save_data(total_supply, admin_address, in_msg_body~load_ref(), wallet_code);
        return ();
    }
} 

() mint_tokens(slice receiver_address, cell wallet_code, int amount, cell master_msg) impure {
    cell state_init = calculate_wallet_state(receiver_address, my_address(), wallet_code);
    cell wallet_address = calculate_wallet_address(state_init);
    cell msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(wallet_address)
        .store_coins(amount)
        .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)     ;; init field + msg_body as cell (not in place) + ???
        .store_ref(state_init)
        .end_cell();

    send_raw_message(msg, 1);   ;; pay transfer fees separately, revert on errors
}
