#include "imports/stdlib.fc";
#include "imports/op_codes.fc";
#include "./utils.fc";

int min_tons_for_storage() asm "10000000 PUSHINT"; ;; 0.01 TON
;; Note that 2 * gas_consumptions is expected to be able to cover fees on both wallets (sender and receiver)
;; and also constant fees on inter-wallet interaction, in particular fwd fee on state_init transfer
;; that means that you need to reconsider this fee when:
;; a) jetton logic become more gas-heavy
;; b) jetton-wallet code (sent with inter-wallet message) become larger or smaller
;; c) global fee changes / different workchain
int gas_consumption() asm "15000000 PUSHINT"; ;; 0.015 TON

(int, slice, slice, cell) load_data() inline {
    slice ds = get_data().begin_parse();

    return (
        ds~load_coins(),        ;; balance
        ds~load_msg_addr(),     ;; owner address
        ds~load_msg_addr(),     ;; minter address
        ds~load_ref()           ;; wallet code
    );
}

() save_data(int balance, slice owner_address, slice minter_address, cell wallet_code) impure inline_ref {
    set_data(begin_cell()
        .store_coins(balance)
        .store_slice(owner_address)
        .store_slice(minter_address)
        .store_ref(wallet_code)
        .end_cell()
    );
}

() on_bounce(slice in_msg_body) impure inline {
    in_msg_body~skip_bits(32); ;; 0xFFFFFFFF
    (int balance, slice owner_address, slice minter_address, cell wallet_code) = load_data();
    int op = in_msg_body~load_uint(32);
    throw_unless(709, (op == op::internal_transfer()) | (op == op::burn_notification()));


    int query_id = in_msg_body~load_uint(64);
    int jettons = in_msg_body~load_coins();
    balance += jettons;

    save_data(balance, owner_address, minter_address, wallet_code);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    
    int flags = cs~load_uint(4);
    if (flags & 1) {
        on_bounce(in_msg_body);
        return ();
    }

    slice sender = cs~load_msg_addr();

    cs~load_msg_addr(); ;; skip destination
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee

    int fwd_fee = muldiv(cs~load_coins(), 3, 2);    ;; we use message fwd_fee for estimation of forward_payload costs

    int op = in_msg_body~load_uint(32);

    if (op == op::transfer()) {             ;; outgoing transfer
        send_tokens(in_msg_body, sender, msg_value, fwd_fee);
        return ();
    }

    if (op == op::internal_transfer()) {    ;; incoming transfer
        receive_tokens(in_msg_body, sender, my_balance, fwd_fee, msg_value);
        return ();
    }

    if (op == op::burn()) {                 ;; burn
        burn_tokens(in_msg_body, sender, msg_value, fwd_fee);
        return ();
    }

    throw(0xffff);
}

() send_tokens(slice in_msg_body, slice sender, int msg_value, int fwd_fee) impure inline {
    int query_id = in_msg_body~load_uint(64);
    int jettons = in_msg_body~load_coins();
    slice receiver_address = in_msg_body~load_msg_addr();
    force_chain(receiver_address);

    (int balance, slice owner_address, slice minter_address, cell wallet_code) = load_data();
    throw_unless(705, equal_slices(sender, owner_address));

    balance -= jettons;
    throw_unless(706, balance >= 0);

    cell state_init = calculate_wallet_state(receiver_address, minter_address, wallet_code);
    slice receiver_wallet_address = calculate_wallet_address_from_cell(state_init);
    slice response_address = in_msg_body~load_msg_addr();
    cell custom_payload = in_msg_body~load_dict();
    int forward_tons = in_msg_body~load_coins();
    throw_unless(708, slice_bits(in_msg_body) >= 1);
    slice forward_payload = in_msg_body;

    int forward_count = forward_tons ? 2 : 1;
    throw_unless(709, msg_value > forward_tons +
                     ;; 3 messages: wal1->wal2,  wal2->owner, wal2->response
                     ;; but last one is optional (it is ok if it fails)
                     forward_count * fwd_fee +
                     (2 * gas_consumption() + min_tons_for_storage()));
                     ;; universal message send fee calculation may be activated here
                     ;; by using this instead of fwd_fee
                     ;; msg_fwd_fee(to_wallet, msg_body, state_init, 15)

    cell msg_body = begin_cell()
        .store_uint(op::internal_transfer(), 32)
        .store_uint(query_id, 64)
        .store_coins(jettons)
        .store_slice(owner_address)
        .store_slice(response_address)
        .store_coins(forward_tons)
        .store_slice(forward_payload)
        .end_cell();

    cell msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(receiver_wallet_address)
        .store_coins(0)
        .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
        .store_ref(state_init)
        .store_ref(msg_body)
        .end_cell();

    send_raw_message(msg, 64);   ;; revert on errors and remaining coins
    save_data(balance, owner_address, minter_address, wallet_code);
}

() receive_tokens(slice in_msg_body, slice sender, int my_balance, int fwd_fee, int msg_value) impure inline {
    ;; NOTE we can not allow fails in action phase since in that case there will be
    ;; no bounce. Thus check and throw in computation phase.
    (int balance, slice owner_address, slice minter_address, cell wallet_code) = load_data();
    int query_id = in_msg_body~load_uint(64);
    int jettons = in_msg_body~load_coins();
    balance += jettons;

    slice from_address = in_msg_body~load_msg_addr();
    slice response_address = in_msg_body~load_msg_addr();
    throw_unless(707, equal_slices(sender, minter_address) 
        | equal_slices(sender, calculate_wallet_address(from_address, minter_address, wallet_code))
    );

    int balance_before = my_balance - msg_value;
    int storage_fee = min_tons_for_storage() - min(min_tons_for_storage(), balance_before);
    msg_value -= (storage_fee + gas_consumption());

    int forward_tons = in_msg_body~load_coins();
    if (forward_tons) {
        msg_value -= (fwd_fee + forward_tons);
        slice forward_payload = in_msg_body;

        cell msg_body = begin_cell()
            .store_uint(op::transfer_notification(), 32)
            .store_uint(query_id, 64)
            .store_coins(jettons)
            .store_slice(from_address)
            .store_slice(forward_payload)
            .end_cell();

        cell msg = begin_cell()
            .store_uint(0x10, 6) ;; we should not bounce here cause receiver can have uninitialized contract
            .store_slice(owner_address)
            .store_coins(forward_tons)
            .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1) ;; msg body as ref
            .store_ref(msg_body)
            .end_cell();

        send_raw_message(msg, 1); ;; transfer fees separately
    }

    if ((response_address.preload_uint(2) != 0) & (msg_value > 0)) {
        cell msg = begin_cell()
            .store_uint(0x10, 6) ;; no bounce
            .store_slice(response_address)
            .store_coins(msg_value)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op::excesses(), 32)
            .store_uint(query_id, 64)
            .end_cell();
        send_raw_message(msg, 2);   ;; ignore errors
    }

    save_data(balance, owner_address, minter_address, wallet_code);
}

() burn_tokens(slice in_msg_body, slice sender, int msg_value, int fwd_fee) {
    ;; NOTE we can not allow fails in action phase since in that case there will be
    ;; no bounce. Thus check and throw in computation phase.
    (int balance, slice owner_address, slice minter_address, cell wallet_code) = load_data();
    int query_id = in_msg_body~load_uint(64);
    int jettons = in_msg_body~load_coins();
    balance -= jettons;

    throw_unless(705, equal_slices(sender, owner_address));
    throw_unless(706, balance >= 0);
    throw_unless(707, msg_value > fwd_fee + 2 * gas_consumption());

    slice response_address = in_msg_body~load_msg_addr();

    cell msg_body = begin_cell()
        .store_uint(op::burn_notification(), 32)
        .store_uint(query_id, 64)
        .store_coins(jettons)
        .store_slice(owner_address)
        .store_slice(response_address)
        .end_cell();

    cell msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(minter_address)
        .store_coins(0)
        .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)  ;; msg body as ref
        .end_cell();
    send_raw_message(msg, 64); ;; remaining balance

    save_data(balance, owner_address, minter_address, wallet_code);
}


(int, slice, slice, cell) get_wallet_data() method_id {
    return load_data();
}

