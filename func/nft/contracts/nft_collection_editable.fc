#include "imports/stdlib.fc";
#include "imports/op_codes.fc";

int workchain() asm "0 PUSHINT";

(slice, int, cell, cell, cell) load_data() inline_ref {
    slice ds = get_data().begin_parse();
    return (
        ds~load_msg_addr(),     ;; owner_address
        ds~load_uint(64),       ;; next_item_index
        ds~load_ref(),          ;; content
        ds~load_ref(),          ;; nwt_item_code
        ds~load_ref()           ;; royalty_params
    );
}

() save_data(slice owner_address, int next_item_index, cell content, cell nft_item_code, cell royalty_params) impure inline_ref {
    set_data(begin_cell()
        .store_slice(owner_address)
        .store_uint(next_item_index, 64)
        .store_ref(content)
        .store_ref(nft_item_code)
        .store_ref(royalty_params)
        .end_cell());
}

cell calculate_nft_item_state_init(int item_index, cell nft_item_code) {
    cell data = begin_cell()
        .store_uint(item_index, 64)
        .store_slice(my_address())
        .end_cell();

    return begin_cell()
        .store_uint(0, 2)
        .store_dict(nft_item_code)
        .store_dict(data)
        .store_uint(0, 1)
        .end_cell();
}

slice calculate_nft_item_address(int wc, cell state_init) {
  return begin_cell()
    .store_uint(4, 3)
    .store_int(wc, 8)
    .store_uint(cell_hash(state_init), 256)
    .end_cell()
    .begin_parse();
}

() deploy_nft_item(int item_index, cell nft_item_code, int amount, cell nft_content) impure inline_ref {
    cell state_init = calculate_nft_item_state_init(item_index, nft_item_code);
    slice nft_address = calculate_nft_item_address(workchain(), state_init);

    cell msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(nft_address)
        .store_coins(amount)
        .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
        .store_ref(state_init)
        .store_ref(nft_content)
        .end_cell();

    send_raw_message(msg, 1);   ;; pay transfer fees separately, revert on errors
}

() send_royalty_params(slice to_address, int query_id, slice data) impure inline {
    var msg = begin_cell()
        .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
        .store_slice(to_address)
        .store_coins(0)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(op::report_royalty_params(), 32)
        .store_uint(query_id, 64)
        .store_slice(data)
        .end_cell();
        
    send_raw_message(msg, 64); ;; carry all the remaining value of the inbound message
}

() recv_internal(cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    slice cs = in_msg_full.begin_parse();

    int flags = cs~load_uint(32);
    if (flags & 1) {    ;; ignore bounced
        return ();
    }
    slice sender = cs~load_msg_addr();

    var (owner_address, next_item_index, content, nft_item_code, royalty_params) = load_data();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::get_royalty_params()) {
        send_royalty_params(sender, query_id, royalty_params.begin_parse());
        return ();
    }

    throw_unless(401, equal_slices(sender, owner_address));

    if (op == 1) {      ;; deploy new nft
        int item_index = in_msg_body~load_uint(64);
        throw_unless(402, item_index <= next_item_index);

        deploy_nft_item(item_index, nft_item_code, in_msg_body~load_coins(), in_msg_body~load_ref());

        if (item_index == next_item_index) {
            next_item_index += 1;
            save_data(owner_address, next_item_index, content, nft_item_code, royalty_params);
        }
        return ();
    }

    if (op == 2) {
        int counter = 0;
        cell deploy_list = in_msg_body~load_ref();

        do {
            var (item_index, item, f?) = deploy_list~udict::delete_get_min(64);

            if (f?) {
                counter += 1;
                throw_unless(399, counter < 250);
                throw_unless(403 + counter, item_index <= next_item_index);

                deploy_nft_item(item_index, nft_item_code, item~load_coins(), item~load_ref());

                if (item_index == next_item_index) {
                    next_item_index += 1;
                }
            }
        } until (~ f?);

        save_data(owner_address, next_item_index, content, nft_item_code, royalty_params);
        return ();
    }

    if (op == 3) {  ;; change owner
        save_data(in_msg_body~load_msg_addr(), next_item_index, content, nft_item_code, royalty_params);
        return ();
    }

    if (op == 4) { ;; change content
        save_data(owner_address, next_item_index, in_msg_body~load_ref(), nft_item_code, in_msg_body~load_ref());
    }

    throw(0xffff);
}

(int, cell, slice) get_collection_data() method_id {
    var (owner_address, next_item_index, content, _, _) = load_data();
    var cs = content.begin_parse();
   
    return (next_item_index, cs~load_ref(), owner_address);
}

slice get_nft_address_by_index(int index) {
    var (_, _, _, nft_item_code, _) = load_data();

    return calculate_nft_item_address(workchain(), calculate_nft_item_state_init(index, nft_item_code));
}

(int, int, slice) royalty_params() {
    var (_, _, _, _, royalty) = load_data();
    slice cs = royalty.begin_parse();

    return (cs~load_uint(16), cs~load_uint(16), cs~load_msg_addr());
}

cell get_nft_content(int index, cell individual_nft_content) method_id {
    var (_, _, content, _, _) = load_data();
    slice cs = content.begin_parse();
    cs~load_ref();

    slice common_content = cs~load_ref().begin_parse();
    return (begin_cell()
        .store_uint(1, 8) ;; offchain tag
        .store_slice(common_content)
        .store_ref(individual_nft_content)
        .end_cell());
}