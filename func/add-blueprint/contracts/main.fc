#include "imports/stdlib.fc";

const const::min_tons_for_storage = 10000000; ;; 0.01 TON

(int, slice, slice) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_uint(32),       ;; counter
        ds~load_msg_addr(),     ;; last sender
        ds~load_msg_addr()      ;; owner
    );
}

() save_data(int counter, slice sender, slice owner) impure inline {
    set_data(begin_cell()
        .store_uint(counter, 32)
        .store_slice(sender)
        .store_slice(owner)
        .end_cell()
    );
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();   ;; cell slice
    int flags = cs~load_uint(4);
    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);     ;; operational code

    var (counter, previous_sender, owner) = load_data();
    if (op == 1) {
        ;; counter logic
        int increment = in_msg_body~load_uint(32);
        save_data(counter + increment, sender_address, owner);
        return();
    }

    if (op == 2) {
        ;; deposit
        return();
    }

    if (op == 3) {
        ;; withdraw
        throw_unless(103, equal_slice_bits(sender_address, owner));

        int withdraw_amount = in_msg_body~load_coins();
        var [balance, _] = get_balance();
        throw_if(104, balance < withdraw_amount);

        int return_value = min(withdraw_amount, balance - const::min_tons_for_storage);
        var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(owner)
            .store_coins(return_value)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .end_cell();

        send_raw_message(msg, 1); ;; msg mode = 0 (ordinary message) + 1 (Pay transfer fee separetly from return value)

        return();
    }

    if (op == 4) {
        throw_unless(103, equal_slice_bits(sender_address, owner));
        var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(owner)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .end_cell();

        send_raw_message(msg, 128 + 2 + 32);
        return();
    }

    throw(777);
}

;; Getter
(int, slice, slice) get_contract_storage() method_id {
    return load_data();
}

(int) balance() method_id {
    var [balance, _] = get_balance();
    return balance; 
}
